// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	usermodel "restapi/module/user/usermodel"

	mock "github.com/stretchr/testify/mock"
)

// UserBusiness is an autogenerated mock type for the UserBusiness type
type UserBusiness struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, req
func (_m *UserBusiness) Login(ctx context.Context, req *usermodel.LoginReq) (*usermodel.LoginRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *usermodel.LoginRes
	if rf, ok := ret.Get(0).(func(context.Context, *usermodel.LoginReq) *usermodel.LoginRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermodel.LoginRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *usermodel.LoginReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *UserBusiness) Register(ctx context.Context, req *usermodel.RegisterReq) (*usermodel.RegisterRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *usermodel.RegisterRes
	if rf, ok := ret.Get(0).(func(context.Context, *usermodel.RegisterReq) *usermodel.RegisterRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermodel.RegisterRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *usermodel.RegisterReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserBusiness interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserBusiness creates a new instance of UserBusiness. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserBusiness(t mockConstructorTestingTNewUserBusiness) *UserBusiness {
	mock := &UserBusiness{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
