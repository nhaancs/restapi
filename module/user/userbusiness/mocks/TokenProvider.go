// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	tokenprovider "restapi/pkg/tokenprovider"

	mock "github.com/stretchr/testify/mock"
)

// TokenProvider is an autogenerated mock type for the TokenProvider type
type TokenProvider struct {
	mock.Mock
}

// Generate provides a mock function with given fields: payload, expiryInSeconds
func (_m *TokenProvider) Generate(payload tokenprovider.TokenPayload, expiryInSeconds int64) (*tokenprovider.Token, error) {
	ret := _m.Called(payload, expiryInSeconds)

	var r0 *tokenprovider.Token
	if rf, ok := ret.Get(0).(func(tokenprovider.TokenPayload, int64) *tokenprovider.Token); ok {
		r0 = rf(payload, expiryInSeconds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tokenprovider.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tokenprovider.TokenPayload, int64) error); ok {
		r1 = rf(payload, expiryInSeconds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: token
func (_m *TokenProvider) Validate(token string) (*tokenprovider.TokenPayload, error) {
	ret := _m.Called(token)

	var r0 *tokenprovider.TokenPayload
	if rf, ok := ret.Get(0).(func(string) *tokenprovider.TokenPayload); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tokenprovider.TokenPayload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTokenProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenProvider creates a new instance of TokenProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenProvider(t mockConstructorTestingTNewTokenProvider) *TokenProvider {
	mock := &TokenProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
